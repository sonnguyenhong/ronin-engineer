const { getAllReservations, getReservationByCode, createReservation } = require('../repository/reservation.repo');
const ErrorResponse = require('../../dto/error.response');
const { HTTP_STATUS_CODE } = require('../../../infrastructure/constant');
const { randomReservationCode } = require('../util');
const { createTicket } = require('../../ticket/repository/ticket.repo');
const { getFlightById, updateFlight } = require('../../flight/repository/flight.repo');

class FlightService {
    constructor(localCache) {
        this.localCache = localCache;
    }

    getAllReservations = async ({ page, perPage, sortOrder, sortBy, filter }) => {
        const reservations = await getAllReservations({ page, perPage, sortOrder, sortBy, filter });
        return reservations;
    }

    getReservationByCode = async ({ code }) => {
        const reservation = await getReservationByCode({ code });
        return reservation;
    }

    /**
     * userId - id of user who make the reservation
     * flightId - id of selected flight
     * tickets - information of tickets:
     *  format: 
     *      [{
     *          code: autogenerated() - code of ticket
     *          passengerId: passencer citizen id
     *          passengerName: ABC
     *          seatId - id of seat
     *      }, ...]
     */
    createReservation = async ({ userId, flightId, tickets }) => {
        const reservationCode = randomReservationCode();
        const existedReservation = await getReservationByCode({ reservationCode });
        const numberOfTickets = tickets.length;

        // Check if there is no tickets booked
        if(numberOfTickets <= 0) {
            throw new ErrorResponse('There is no ticket booked', HTTP_STATUS_CODE.BAD_REQUEST);
        }
        // Check if the flight has enough capacity
        const flight = await getFlightById({ id: flightId });
        if(numberOfTickets > flight.availableCapacity) {
            throw new ErrorResponse('There is not enough seat for your reservation', HTTP_STATUS_CODE.BAD_REQUEST);
        }
        if(existedReservation) {
            throw new ErrorResponse('Reservation code existed', HTTP_STATUS_CODE.BAD_REQUEST);
        }
        const newReservation = await createReservation({ 
            code: reservationCode,
            userId,
        });
        if(!newReservation) {
            throw new ErrorResponse('Fail to create new reservation', HTTP_STATUS_CODE.BAD_REQUEST);
        }
        const updatedFlight = await updateFlight({ 
            id: flight.id, 
            version: flight.version, 
            availableCapacity: flight.availableCapacity - numberOfTickets, 
        });
        if(!updatedFlight) {
            throw new ErrorResponse('Error when update flight', HTTP_STATUS_CODE.BAD_REQUEST);
        }
        for(const ticket of tickets) {
            const newTicket = await createTicket({ 
                code: ticket.code,
                reservationId: newReservation.id, 
                seatId: ticket.seatId,  
                passengerName: ticket.passengerName,
                passengerId: ticket.passengerId,
            });
        }

        return newReservation;
    }
}

module.exports = FlightService;